第十一章  运算符重载
运算法重载是一种c++多态形式。c++ 允许将运算符重载扩展到用户定义的类型，例如允许使用+将两个对象相加，编译器根据操作数的数目和类型决定使用哪种加法定义。
operator op （）
例如，
operator+() 重载加法运算符  op 必须是有效的运算符， 不能虚构一个新的符号 不能有operator@（） 这样的函数 因为c++中没有@运算符。
operator*() 重载*运算符
operator[]() 重载[]运算符，因为[]是数组索引符。

添加加法运算符：
参考代码

重载限制：

1. 重载的运算符必须至少有一个操作数是用户定义的类型。

2. 不能违反运算符原来的使用规则，例如，不能将求模运算符重载为只使用一个参数。

3. 不能修改运算符的优先级

4. 不能创建新的运算符，例如不能定义operator**()

5. 不能重载以下运算符

sizeof			//sizeof运算符
.			//成员运算符
.*			//成员指针运算符
::			//作用域解析运算符
?:			//条件运算符
typeid			//RTTI
const_cast	        //强制类型转换
dynamic_cast	        //强制类型转换
reinterpret_cast        //强制类型转换
static_cast	        //强制类型转换


6. 大多数运算符都可以通过成员或非成员函数进行重载，但以下运算符只能通过成员函数重载
=
()
[]
->

友元：

友元有三种：
友元函数
友元类
友元成员函数

友元函数：让函数成为类的友元，使得在该函数内可以通过类的对象访问该类的私有成员变量或者受保护的成员变量。换一句话，让该函数与类的成员函数具有相同的访问权限。
友元函数
（1）友元函数是在类声明中由关键字friend修饰说明的非成员函数，在它的函数体中能够通过对象名访问private和protected成员
（2）作用：增加灵活性，使程序可以在封装和快速性方面做合理选择
（3）访问对象中的成员必须通过对象名
友元函数参考代码。
按照c++语法要求私有数据只能类成员内部访问，因此为了让外部函数也可以访问类的内部私有数据，定义了一种友元的语法，提高扩展性。

常用的重载运算符<<
参考代码

友元类：类A声明为类B的友元，则类A中可以访问类B的私有成员变量。
（1）若一个类为另一个类的友元，则此类的所有成员都可以访问对方类的私有成员
（2）声明：将友元类名在另一各类中使用friend修饰符说明


类的自动转换与强制类型转换
将基本类型转换成类类型：
1 将类定义成与基本类型或者另一个类相关，使得从一个类型转化成另一个类型有意义
具体方法通过定义不同的构造函数。
1 只有接收一个参数的构造函数才能作为转换函数
2 或者构造函数含有多个参数，但是只有第一个参数没有默认值，其他参数都含有默认值，则这个构造函数也可以作为转换函数。

Time time = 12; 使用构造函数自动类型转化
如果想要关闭这种自动转化特性，可以使用关键字 explicit  用于关闭这种自动特性。

Time time = Time（13）

转换函数：将类类型转换成基本类型
要转换成typename类型，则定义转换函数如下：
operator typename()
注意以下几点：
转换函数必须是类方法；
转换函数不能指定返回类型
转换函数不能含有参数。
参考代码

